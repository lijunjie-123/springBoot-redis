<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--连接池配置对象-->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="100"></property>
        <property name="maxIdle" value="100"></property>
        <property name="minIdle" value="10"></property>
        <property name="maxWaitMillis" value="1000"></property>
        <property name="blockWhenExhausted" value="true"></property>
        <property name="testOnBorrow" value="false"></property>
        <property name="testOnReturn" value="false"></property>
        <property name="testOnCreate" value="false"></property>
    </bean>
    <!-- Sentinel配置核心 -->
    <bean id="sentinelConfiguration" class="org.springframework.data.redis.connection.RedisSentinelConfiguration">
        <property name="master">
            <bean class="org.springframework.data.redis.connection.RedisNode">
                <property name="name" value="mymaster"/>
            </bean>
        </property>
        <property name="sentinels">
            <set>
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="192.168.132.128"></constructor-arg>
                    <constructor-arg name="port" value="26379"></constructor-arg>
                </bean>

                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="192.168.132.128"></constructor-arg>
                    <constructor-arg name="port" value="26380"></constructor-arg>
                </bean>

                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="192.168.132.128"></constructor-arg>
                    <constructor-arg name="port" value="26381"></constructor-arg>
                </bean>
            </set>
        </property>
    </bean>

    <!-- usePool = false Jedis直连, true 连接池 -->
    <!--<bean id="jedisConnFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
        p:usePool="true" p:poolConfig-ref="poolConfig" p:hostName="192.168.132.128" p:port="6666" p:password="123456" p:database="10">
    </bean>-->
    <bean id="jedisConnFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          p:usePool="true" p:poolConfig-ref="poolConfig" p:database="3" >
        <!--通知JedisConnectionFactory使用sentinel创建jedis连接-->
        <constructor-arg index="0" ref="sentinelConfiguration"></constructor-arg>

    </bean>
    <!--redisTemplate本质就是Jedis的封装,在Jedis基础上进行了大幅度的简化,并且对连接池友好,允许自动回收连接.
    PS:前面课程自己写的JedisPool如果没有调用close方法则会出现连接泄露的问题,但在Spring-Data-Redis中则不会-->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" p:connectionFactory-ref="jedisConnFactory">
        <!-- keySerializer key序列化采用String原文保存 -->
        <property name="keySerializer">
            <!-- StringRedisSerializer 字符串原文序列化保存 -->
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
        </property>
        <property name="valueSerializer">
            <!--//利用Jackson进行对象序列化-->
            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"></bean>
        </property>
        <property name="hashKeySerializer">
            <!-- StringRedisSerializer 字符串原文序列化保存 -->
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
        </property>
        <property name="hashValueSerializer">
            <!--//利用Jackson进行对象序列化-->
            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"></bean>
        </property>
    </bean>
</beans>